#include "./test.h"

#include <unistd.h>

//pacat测试
FILE *pcm_file;
FILE *alaw_file;
int PCMBuffer_current;

int getNalu(FILE *File,unsigned char *buf,bool *end)
{

    memset(buf,0,1024*1024);
    int pos;

    if((pos = fread(buf, 1, 4, File)) <= 0)
        return -1;
    data_length -= 4;
    if(buf[0] != 0 || buf[1] != 0 || buf[2] != 0 || buf[3] != 1)
        return -1;
    pos = 4;
    while(1)
    {
        if(feof(File)){*end = true; break;}
        if(data_length == 0){        
            *end = true;
            break;
        }
        buf[pos] = fgetc(File);
        data_length--;
        if(buf[pos-3] == 0 && buf[pos-2] == 0 && buf[pos-1] == 0 && buf[pos] == 1)
        {
            fseek(File,-4,SEEK_CUR);
            data_length += 4;
            pos -= 4;
            break;
        }
        pos++;
    }
    return pos + 1;
}
int packet2Mp4(FILE *File, int flag)
{
    unsigned char *buf = malloc(1024*1024);
    unsigned char *nalu = NULL;
    unsigned char naluType;
    int len = 0;
    int length = 0;
    long ts;
    
    bool end   = false;
    while(!end){

        len = getNalu(File, buf, &end);
        if(len <= 0){break;}
        if (buf[0] != 0 || buf[1] != 0 || buf[2] != 0 || buf[3] != 1){
            continue;
        }
        nalu = buf+4;
        naluType = nalu[0]&0x1F;
        
        switch (naluType)
        {
        case 0x07: // SPS
            if(!first){break;}
            printf("------------------------------------\n");
            
            if (first)
            {
                //printf("sps(%d)\n", len);
                videoId = MP4AddH264VideoTrack
                    (handle, 
                     timeScale,              // 一秒钟多少timescale
                     timeScale/rate,         // 每个帧有多少个timescale
                     width,                  // width
                     height,                 // height
                     nalu[1],                // sps[1] AVCProfileIndication
                     nalu[2],                // sps[2] profile_compat
                     nalu[3],                // sps[3] AVCLevelIndication
                     3);                     // 4 bytes length before each NAL unit
                if (videoId == MP4_INVALID_TRACK_ID)
                {
                    printf("Error:Can't add track.\n");
                    return -1;
                }
                audioId = MP4AddAudioTrack(handle, 8000, MP4_INVALID_DURATION, MP4_MPEG4_AUDIO_TYPE); 
                MP4SetAudioProfileLevel(handle, 0x02);
              
                
                
            }
            first = true;
            MP4AddH264SequenceParameterSet(handle, videoId, nalu, len);
            
            break;
            
        case 0x08: // PPS
            if(!first){break;}
            //printf("pps(%d)\n", len);
            first = false;
            MP4AddH264PictureParameterSet(handle, videoId, nalu, len);
            MP4SetVideoProfileLevel(handle, 0x7F);
            
            break;
        case 0x06://SEI信息
            printf("SEI(%d)\n", len);
            break;
        case 0x05:
            printf("IDR slice(%d)\n", len);
            buf[0] = (len>>24)&0xFF;
            buf[1] = (len>>16)&0xFF;
            buf[2] = (len>>8)&0xFF;
            buf[3] = (len>>0)&0xFF;
            MP4WriteSample(handle, videoId, buf, len+4, /*ts*/MP4_INVALID_DURATION, 0, 1);
            
            break;
        default:
            //printf("slice(%d)\n", len);
            buf[0] = (len>>24)&0xFF;
            buf[1] = (len>>16)&0xFF;
            buf[2] = (len>>8)&0xFF;
            buf[3] = (len>>0)&0xFF;
            MP4WriteSample(handle, videoId, buf, len+4, /*ts*/MP4_INVALID_DURATION, 0, 0);
            
            break;
        }
}

    free(buf);


    return 0;
}



void alaw2pcm(short int*dst,FILE *file, faacEncHandle hEncoder){
    int count;
    char buf[2]={0};
    for(count = 0; count < data_length; count++){
        unsigned char alaw = fgetc(file);
        fwrite(&alaw, sizeof(unsigned char), 1, alaw_file);
        buf[0] = ALawDecompressTable[alaw] | buf[0];
        buf[1] = (ALawDecompressTable[alaw] >>  8 ) | buf[1];
        //fwrite(buf, sizeof(char), 2, pcm_file);
        buf[0] = 0;
        buf[1] = 0;
        *dst++ = ALawDecompressTable[alaw];
        PCMBuffer_current++;
        if(PCMBuffer_current == 1024){
            /*
            int nRet = faacEncEncode(hEncoder, (int *)dst, nInputSamples, pbAACBuffer, nMaxOutputBytes);
            if(nRet = 0)
                return;
                MP4WriteSample(handle, audioId, pbAACBuffer, nRet, MP4_INVALID_DURATION, 0, 1);*/
            PCMBuffer_current = 0;
        }
    }

}
int wirte_audio(lame_t lame, short *pcm_data){
    int status = 0;
	char *mp3_buffer = (char*)malloc(8000 / 20 + 7200);
    
    int mp3_bytes = lame_encode_buffer_interleaved(lame, pcm_data,480, mp3_buffer, 7600);
    

    if (mp3_bytes < 0) 
    {
        printf("lame_encode_buffer_interleaved returned %d/n", mp3_bytes);
        return -1;
    } 
    MP4WriteSample(handle, audioId, mp3_buffer, strlen(mp3_buffer), MP4_INVALID_DURATION, 0, 1);
    free(mp3_buffer);

}


int cms_parser(FILE *fp)
{
    char *boundary = NULL;
    char line_buf[1024];
    int line_buf_ptr = 0;
    int boundary_ptr = 0;
    int boundary_size = 0;
    bool isVedio = true;
    
   
    /*
      //lame库 初始化和配置
      lame_global_flags* lame = lame_init();
      if(lame == NULL){
      printf("lame_init failed\n");
      return -1; 
      }
      lame_set_in_samplerate(lame, 8000.0);
      lame_set_num_channels(lame,1);
      lame_set_VBR(lame, vbr_default);
      lame_init_params(lame);
      short int*pbPCMBuffer = (short int*)malloc(480*2);
      char *MP3Buffer = (char*)malloc(1024);
    */

    
    //faac
    pcm_file = fopen("p.wav","wb");
    alaw_file = fopen("a.alaw","wb+");
    unsigned long nSampleRate = 8000;//采样率
    unsigned int  nChannels = 1;     //单双声道
    unsigned int  nPCMBitSize = 16;  //pcm数据位数
    unsigned long nInputSamples = 0; //编码数据的长度
    unsigned long nMaxOutputBytes = 0;//编码后数据的最大大小
    faacEncHandle hEncoder = {0}; //文件操作句柄

    //打开faac编码器
    hEncoder = faacEncOpen(nSampleRate, nChannels, &nInputSamples, &nMaxOutputBytes);
    if(hEncoder == NULL ){
        printf("faac编码器打开失败!\n");
        return -1;
    }
    int nPCMBufferSize = nInputSamples * nPCMBitSize/8;
    
    //unsigned short pbPCMBuffer[1024];
    unsigned char *pbPCMBuffer = (unsigned char *)malloc(nPCMBufferSize);
    printf("每次解码pcm数据的大小[%d]\n",nPCMBufferSize);

       
    unsigned char *pbAACBuffer = (unsigned char *)malloc(nMaxOutputBytes);
    printf("aac数据的大小[%d]\n",nMaxOutputBytes);
    sleep(2);
    //获取当前编码器的信息
    faacEncConfigurationPtr pConfiguration = {0};
    pConfiguration = faacEncGetCurrentConfiguration(hEncoder);
    

    //设置版本,录制MP4文件时要用MPEG4
	pConfiguration->version = MPEG4 ;
	pConfiguration->aacObjectType = LOW; //LC编码
 
	//输入数据类型
	pConfiguration->inputFormat = FAAC_INPUT_16BIT;
	pConfiguration->outputFormat = 0;//RAW_STREAM;
	// outputFormat (0 = Raw; 1 = ADTS)
	// 录制MP4文件时，要用raw流，
 
	//瞬时噪声定形滤波器
	pConfiguration->shortctl = SHORTCTL_NORMAL;
 
	/*pConfiguration->useTns=true;
	pConfiguration->quantqual=100;
	pConfiguration->bandWidth=0;
	pConfiguration->bitRate=0;*/


    faacEncSetConfiguration(hEncoder, pConfiguration);
    
    
    uint8_t flag = 0;
    CMS_STATE state = CMS_FILE_HEADER;
    CMS_DATA *data;
    CMS_DATA_TYPE data_state = UNKNOW;
    char ch;
    int end = 0;
    
    while(!feof(fp)){
        ch = fgetc(fp); 
        switch (state) {
        case CMS_FILE_HEADER:
            if (ch == '\r') {
            } else if(ch == '\n') {
                if(line_buf_ptr == 0){
                    state = CMS_BOUNDARY;
                }else{
                    char *p     = line_buf;
                    char *key   = strsep(&p, ":");
                    char *value = p;
                    if (key && value) {
                        if (value[0] == ' ') { value++; };
                        if (strcmp(key, "boundary") == 0) {
                            char buf[100];
                            sprintf(buf, "\r\n--%s\r\n", value);
                            boundary = strdup(buf);
                            boundary_size = strlen(boundary);
                            boundary_ptr = 2;
                        } else if (strcmp(key, "format") == 0 && strcmp(value, "cms") == 0) {
                            flag = flag | CMS_FLAG_FORMAT_FOUND;
                        } else if (strcmp(key, "track") == 0) {
                            flag = flag | CMS_FLAG_TRACK_FOUND;
                            
                        }
                    }
                    
                }
                line_buf_ptr = 0;
            }else{
                if(line_buf_ptr <= 1023){
                    line_buf[line_buf_ptr] = ch;
                    line_buf_ptr++;
                    line_buf[line_buf_ptr] = 0;
                }else{
                    //出错处理
                    printf("line_buf_ptr超长\n");
                    return -1;
                }
            }
            break;
        case CMS_BOUNDARY:
            if(ch == boundary[boundary_ptr]){
                boundary_ptr++;
            }else if(boundary_ptr == boundary_size){
                state = CMS_DATA_HEADER;
                line_buf_ptr = 0;
                line_buf[0] = 0;
                boundary_ptr = 0;
            }else{
                if(ch == '\n');
                {
                    fseek(fp,-2,SEEK_CUR);
                    break;
                }
                printf("boundary error\n");
                return -1;
            }          
            break;
        case CMS_DATA_HEADER:
            if(ch == '\r'){
            }else if(ch == '\n'){
                if(line_buf_ptr == 0){       
                    switch(data_state){
                    case CMS_VEDIO_P:{
                        
                        packet2Mp4(fp,0);
                        state = CMS_BOUNDARY;
                        break;
                    }
                    case CMS_VEDIO_I:{
                        
                        packet2Mp4(fp,1);
                        state = CMS_BOUNDARY;
                        break;
                    }
                    case CMS_AUDIO:{
                        
                        alaw2pcm((short int *)pbPCMBuffer, fp, hEncoder);
                        fwrite(pbPCMBuffer, sizeof(char), 960, pcm_file);
                       
                        
                        /*
                          //lame库 pcm转mp3
                          int mp3Bytes = lame_encode_buffer(lame, pbPCMBuffer, NULL, 960,MP3Buffer,1024);
                          if(mp3Bytes > 0){
                            MP4WriteSample(handle, audioId, MP3Buffer, mp3Bytes, MP4_INVALID_DURATION, 0, 1);
                            mp3Bytes = 0;
                            mp3Bytes = lame_encode_flush(lame, MP3Buffer, mp3Bytes);
                            if(mp3Bytes > 0){
                            MP4WriteSample(handle, audioId, MP3Buffer, mp3Bytes, MP4_INVALID_DURATION, 0, 1);
                             }
                            
                            
                        }*/

                        
                        /*
                          //faac库 pcm转aac
                          int nRet = faacEncEncode(hEncoder, (int *)pbPCMBuffer, 960, pbAACBuffer, nMaxOutputBytes);
                        if(nRet <= 0)
                            break;
                        printf("%d\n",nRet);
                        sleep(1);
                        MP4WriteSample(handle, audioId, pbAACBuffer, nRet, MP4_INVALID_DURATION, 0, 1);*/
                        // wirte_audio(lame, pcm_buffer);
                        state = CMS_BOUNDARY;
                        break;
                    }
                    default:
                        state = CMS_BOUNDARY;
                        break;
                    
                    }
                }else{               
                    char *p     = line_buf;
                    char *key   = strsep(&p, ":");
                    char *value = p;
                    if (strcmp(key, "f") == 0) {
                        if (strcmp(value, "i") == 0) {
                            //data->f = 'i';
                            data_state = CMS_VEDIO_I;
                            
                        } else if (strcmp(value, "p") == 0) {
                            //data->f = 'p';
                            data_state = CMS_VEDIO_P;

                        
                        } else if (strcmp(value, "a") == 0) {
                            data_state = CMS_AUDIO;

                        } else if (strcmp(value, "j") == 0) {
                            //data->f = 'j';
                        }
                    } else if (strcmp(key, "ts") == 0) {
                        
                    //data->ts = strtol(value, NULL, 10);
                    } else if (strcmp(key, "l") == 0) {
                        //data->l = strtol(value, NULL, 10);
                        data_length = strtol(value, NULL, 10);
                    } else if (strcmp(key, "t") == 0) {
                        //data->t = strtol(value, NULL, 10);
                    }
                }
               
                line_buf_ptr = 0;
            }else{
                if(line_buf_ptr <= 1023){
                    line_buf[line_buf_ptr] = ch;
                    line_buf_ptr++;
                    line_buf[line_buf_ptr] = 0;
                }else{
                    //出错处理
                    printf("line_buf_ptr超长\n");
                    return -1;
                }
            }
            break;
            
        }
    }
    

    free(pbAACBuffer);
    free(pbPCMBuffer);
    faacEncClose(hEncoder);
}


int main(int argc, char *argv[])
{
    if (argc < 2) {
        printf("Usage: test <source.cms> <target.mp4>\n");
        return 1;
    }
    FILE *fp = fopen(argv[1],"r");
    
    width     = 1280;
	height    = 720;
	rate      = 15;
	timeScale = 90000;
    handle    = NULL;
    handle    = MP4Create(argv[2], 0);
    if (handle == MP4_INVALID_FILE_HANDLE) {
		printf("ERROR:Create mp4 handle fialed.\n");
		return -1;
    }

    MP4SetTimeScale(handle, timeScale);


    cms_parser(fp);

    MP4Close(handle, 0);
    fclose(fp);
    fclose(pcm_file);
    fclose(alaw_file);
    return 0;
}
